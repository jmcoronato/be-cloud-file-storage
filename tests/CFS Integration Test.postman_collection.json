{
	"info": {
		"_postman_id": "49e3ad12-7c76-4344-a973-b674dd653318",
		"name": "CFS Integration Test",
		"description": "Cloud File Storage is a BE service that accepts file uploads from users and allows them to store and  \nshare files securely in the cloud. It provides an abstraction between two  \ndifferent cloud storage providers, Box and Dropbox. If one of the services goes down, the service  \ncan quickly failover to a different provider without affecting the costumers.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18128387"
	},
	"item": [
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Set the token response to the userToken variable of this collection\r",
							"pm.collectionVariables.set(\"userToken\", pm.response.json().token);\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response Content-Type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Token and expiresIn fields are present in the response\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('token');\r",
							"    pm.expect(responseData).to.have.property('expiresIn');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Token and expiresIn are non-empty strings\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");\r",
							"  pm.expect(responseData.expiresIn).to.be.a('string').and.to.have.lengthOf.at.least(1, \"ExpiresIn should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"{{user}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/auth/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"auth",
						"login"
					]
				},
				"description": "### Auth Login\n\nThis endpoint is used to authenticate a user and obtain an access token.\n\n#### Request Body\n\n- username (string, required): The username of the user.\n    \n- password (string, required): The password of the user.\n    \n\n#### Response\n\nThe response of this request is a JSON schema. The specific structure of the response will depend on the success or failure of the authentication process."
			},
			"response": []
		},
		{
			"name": "Stats",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.users).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{userToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:3000/user/stats",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"user",
						"stats"
					]
				},
				"description": "### User Stats\n\nThis endpoint retrieves the statistics of the user. The request must come from a user with admin role.\n\n#### Response\n\nThe response for this request follows the JSON schema below:\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"totalLogins\": {\n      \"type\": \"number\"\n    },\n    \"averageTimeSpent\": {\n      \"type\": \"number\"\n    },\n    \"totalPurchases\": {\n      \"type\": \"number\"\n    }\n  }\n}\n\n ```"
			},
			"response": []
		},
		{
			"name": "Upload File",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response.json();\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.collectionVariables.set(\"fileName\", responseData.file.name);\r",
							"\r",
							"pm.test(\"Response time is within an acceptable range\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"File object schema is valid\", function () {\r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.file.id).to.be.a('string');\r",
							"  pm.expect(responseData.file.user_id).to.be.a('number');\r",
							"  pm.expect(responseData.file.name).to.be.a('string');\r",
							"  pm.expect(responseData.file.size).to.be.a('number');\r",
							"  pm.expect(responseData.file.shared_url).to.be.a('string');\r",
							"  pm.expect(responseData.file.uploaded_date).to.be.a('string');\r",
							"  pm.expect(responseData.file.service).to.be.a('string');\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{userToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"type": "file",
							"src": []
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/file/upload",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"file",
						"upload"
					]
				},
				"description": "The endpoint allows users to upload a file using an HTTP POST request. The request should be sent to [http://localhost:3000/file/upload](http://localhost:3000/file/upload) with a form-data request body type containing a \"file\" parameter of type \"file\".\n\n### Response\n\nThe response returned from the API has a status code of 200 and a content type of application/json. The response body follows the JSON schema below:\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"message\": {\n      \"type\": \"string\"\n    },\n    \"file\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"id\": {\n          \"type\": \"string\"\n        },\n        \"user_id\": {\n          \"type\": \"integer\"\n        },\n        \"name\": {\n          \"type\": \"string\"\n        },\n        \"size\": {\n          \"type\": \"integer\"\n        },\n        \"shared_url\": {\n          \"type\": \"string\"\n        },\n        \"uploaded_date\": {\n          \"type\": \"string\"\n        },\n        \"service\": {\n          \"type\": \"string\"\n        }\n      }\n    }\n  }\n}\n\n ```"
			},
			"response": []
		},
		{
			"name": "Delete File",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.message).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Message is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 2s\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"packages": {},
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "{{userToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:3000/file/delete/{{fileName}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"file",
						"delete",
						"{{fileName}}"
					]
				},
				"description": "### Delete File\n\nThis endpoint is used to delete a specific file using its name.\n\n#### Response\n\nThe response for this request is a JSON object with the following schema:\n\n``` json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"message\": {\n            \"type\": \"string\"\n        }\n    }\n}\n\n ```"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "user",
			"value": "admin",
			"type": "string"
		},
		{
			"key": "password",
			"value": "adminpassword",
			"type": "string"
		},
		{
			"key": "userToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "fileName",
			"value": "",
			"type": "string"
		}
	]
}